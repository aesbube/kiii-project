name: MedView CI/CD

on:
  push:
    branches:
      - "main"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and push backend
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/medview-backend:latest
          platforms: linux/amd64

      - name: Build and push frontend
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/medview-frontend:latest
          platforms: linux/amd64


  aws_instance_prep:
    runs-on: ubuntu-latest
    needs: build
    outputs:
      instance_id: ${{ steps.set_env.outputs.instance_id }}
      public_ip: ${{ steps.get_ip.outputs.public_ip }}
    steps:
      - name: Configure AWS Credentials
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set default.region ${{ secrets.AWS_REGION }}

      - name: Check for existing EC2 instance
        id: check_instance
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=medview" "Name=instance-state-name,Values=running" \
            --query "Reservations[0].Instances[0].InstanceId" \
            --output text)

          if [[ "$INSTANCE_ID" == "None" ]]; then
            echo "EXISTING_INSTANCE=false" >> $GITHUB_ENV
          else
            echo "EXISTING_INSTANCE=true" >> $GITHUB_ENV
            echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
          fi

      - name: Launch EC2 Instance if needed
        if: env.EXISTING_INSTANCE == 'false'
        run: |
          INSTANCE_ID=$(aws ec2 run-instances \
            --launch-template LaunchTemplateId=${{ secrets.EC2_LAUNCH_TEMPLATE_ID }} \
            --tag-specifications "ResourceType=instance,Tags=[{Key=Name,Value=medview }]" \
            --query 'Instances[0].InstanceId' \
            --output text)
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV

      - name: Wait for instance to be ready
        run: |
          INSTANCE_ID=${{ env.INSTANCE_ID }}
          echo "Waiting for EC2 ($INSTANCE_ID) to be ready..."
          aws ec2 wait instance-status-ok --instance-ids $INSTANCE_ID
          echo "Instance is ready."

      - name: Get EC2 Public IP
        id: get_ip
        run: |
          PUBLIC_IP=$(aws ec2 describe-instances \
            --instance-ids ${{ env.INSTANCE_ID }} \
            --query "Reservations[0].Instances[0].PublicIpAddress" \
            --output text)
          echo "public_ip=$PUBLIC_IP" >> $GITHUB_OUTPUT

      - name: Set instance ID output
        id: set_env
        run: echo "instance_id=${{ env.INSTANCE_ID }}" >> $GITHUB_OUTPUT

      - name: Print Public IP to Console
        run: |
          echo "============================================"
          echo "✅ EC2 Instance is ready!"
          echo "🌍 Public IP Address: http://${{ steps.get_ip.outputs.public_ip }}"
          echo "============================================"

  deploy:
    runs-on: ubuntu-latest
    needs: [build, aws_instance_prep]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup SSH Key
        run: |
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" | tr -d '\r' > ec2_key.pem
          chmod 600 ec2_key.pem

      - name: Copy docker-compose.yml to EC2
        run: |
          scp -i ec2_key.pem -o StrictHostKeyChecking=no docker-compose.prod.yml ec2-user@${{ needs.aws_instance_prep.outputs.public_ip }}:/home/ec2-user/docker-compose.prod.yml

      - name: Deploy with docker-compose
        env:
          POSTGRES_DB: ${{ secrets.MEDVIEW_DB_NAME }}
          POSTGRES_PASSWORD: ${{ secrets.MEDVIEW_DB_PASSWORD }}
          POSTGRES_USER: ${{ secrets.MEDVIEW_DB_USER }}
          MEDVIEW_JWT_SECRET: ${{ secrets.MEDVIEW_JWT_SECRET }}
          MEDVIEW_JWT_EXPIRATIONMS: ${{ secrets.MEDVIEW_JWT_EXPIRATIONMS }}
        run: |
          ssh -i ec2_key.pem -o StrictHostKeyChecking=no ec2-user@${{ needs.aws_instance_prep.outputs.public_ip }} "
            echo 'POSTGRES_DB=${POSTGRES_DB}' > /home/ec2-user/.env &&
            echo 'POSTGRES_USER=${POSTGRES_USER}' >> /home/ec2-user/.env &&
            echo 'POSTGRES_PASSWORD=${POSTGRES_PASSWORD}' >> /home/ec2-user/.env &&
            echo 'MEDVIEW_JWT_SECRET=${MEDVIEW_JWT_SECRET}' >> /home/ec2-user/.env &&
            echo 'MEDVIEW_JWT_EXPIRATIONMS=${MEDVIEW_JWT_EXPIRATIONMS}' >> /home/ec2-user/.env &&
            cd /home/ec2-user &&
            docker-compose --env-file .env -f docker-compose.prod.yml down || true &&
            docker-compose --env-file .env -f docker-compose.prod.yml up -d
          "
